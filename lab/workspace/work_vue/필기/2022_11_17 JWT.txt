● JWT(JSON Web Tokens)
  ○ Cookie를 활용한 인증
    - Cookie
      - 클라이언트가 웹사이트에 접속할 때 사용하게 되는 기록 파일(client의 browse에 저장)
      - Key, Value 형식의 문자열 형태로 저장

    - 로그인 과정
      1. 서버가 클라이언트에 정보를 전달할 때 저장하고자 하는 정보를 응답 헤더(Cookie)에 저장하여 전달
      2. 해당 클라이언트는 서버에 요청을 보낼 때마다, 매번 저장된 쿠키를 요청 헤더의 Cookie에 담아 저장
      3. 서버는 쿠키의 정보를 이용하여 해당 요청의 클라이언트 식별 가능

● Token
  - 클라이언트가 서버에 접속하여 사용자 인증을 했을 때 유일 값인 '토큰'을 발급
  - 서버에 요청을 보낼 때 요청의 헤더에 토큰을 넣어서 보냄
  - 클라이언트가 보낸 토큰이 서버에서 발급한 토큰과 같은지를 체크하여 인증처리
  - 토큰은 앱과 서버가 통신 및 인증할 때 많이 사용

● 서버(session)기반 vs 토큰(token)기반 인증
  ○ 서버기반
    - 서버에 사용자 인증 정보를 관리
    - 클라이언트로부터 요청을 받으면 클라이언트의 상태를 계속 유지(Stateful)
    - 클라이언트가 많아지면 성능 문제 발생
 
  ○ 토큰기반
    - 클라이언트에 토큰 발급
    - 로그인이 필요한 작업일 경우 헤더에 토큰을 삽입하여 보내고 인증(Stateless)

● Token 단점
  - 토큰 자체의 데이터 길이가 길다
  - 이로 인한 인증 요청이 많아질수록 네트워크 부하가 심해질 수 있다.
  - payload 자체는 암호화되지 않기 때문에 중요 정보 저장 불가
  - 네트워크 전송방식이기 때문에 토큰을 탈취 당할 우려가 있다.

● JWT
  - 인증에 필요한 정보를 암호화 시킨 JSON 토큰
  - JSON 데이터를 Base64 URL-safe-Encode를 통해 인코딩하여 직렬화
  - 토큰 내부에 위변조 방지를 위한 개인키를 통한 전자서명 포함

