● Vue method
  - Vue Instance는 생성과 관련된 data 및 method의 정의 가능
  - method 안에서 data를 "tihs.데이터이름"으로 접근 가능

● Vue filter
  - 뷰의 필터는 화면에 표시되는 텍스트의 형식을 쉽게 변환해주는 기능
  - filter를 이용하여 표현식에 새로운 결과 형식을 적용
  - 중괄호 보간법 [ {{ }} ] 또는 v-bind 속성에서 사용이 가능

● Vue computed 속성
  - 특정 데이터의 변경사항을 실시간으로 처리
  - 캐싱을 이용하여 데이터의 변경이 없을 경우 캐싱된 데이터를 반환 >> 값
  - setter와 getter를 직접 지정할 수 있음
  - 작성은 method 형태로 작성하지만 Vue에서 proxy 처리하여 propery 처럼 사용

● Vue watch 속성
  - Vue Instance의 특정 property가 변경될 때 실행할 콜백 함수 설정
  - Computed는 종속된 data가 변경되었을 경우 그 data를 다시 계산하여 캐싱
  - Watch의 경우는 data가 변경되었을 경우 다른 data를(변경하는) 작업을 한다.

● Vue event
  - DOM Event를 청취하기 위해 v-on directive 사용
  - inline event handling
  - method를 이용한 event handling

● inline method handler
  - 메소드 이름을 직접 바인딩 하는 대신 인라인 JavaScript 구문에 메소드를 사용할 수도 있다
  - 원본 DOM 이벤트에 액세서 해야 하는 경우 특별한 $event 변수를 사용해 메소드에 전달할 수 있다.

● ref, $refs
  - 뷰에서는 $refs 속성을 이용해 DOM에 접근할 수 있다.
  - 단, 뷰의 가장 중요한 목정 중 하나는 개발자가 DOM을 다루지 않게 하는 것이므로, 
     되도록 ref를 사용하는 것을 피하는 것이 좋다

● class binding
  - element의 class와 style을 변경
  - v-bind : class는 조건에 따라 class를 적용할 수 있다.

● 폼 입력 바인딩
  - v-model directive를 사용하여 폼 input과 textarea element에 양방향 데이터 바인딩을 생성할 수 있다.
    - text와 textarea 태그는 value 속성과 input 이벤트를 사용한다.
    - 체크박스들과 라디오 버튼들은 checked 속성과 change 이벤트를 사용한다.
    - select 태그는 value를 prop으로, change를 이벤트로 사용한다.

● 컴포넌트
  - Vue의 가장 강력한 기능 중 하나.
  - HTML Element를 확장하여 재사용 가능한 코드를 캡슐화
  - Vue Component는 Vue Instance이기도 하기때문에 모든 옵션 객체를 사용
  - Life Cycle Hook 사용 가능
  - 전역 컴포넌트와 지역 컴포넌트

● 컴포넌트간 통신
  - 상위(부모) - 하위(자식) 컴포넌트 간의 data 전달 방법
  - 부모에서 자식 : props라는 특별한 속성을 전달( Pass Props)
  - 자식에서 부모 : event로만 전달 가능 ( Emit Event)