● Javascript
  - 프로토타입 기반의 스크립트 프로그래밍 언어로 객체지향 개념을 지원
  - 웹 브라우저가 JavaScript를 HTML과 함꼐 다운로드 하여 실행
  - 웹 브라우저가 HTML 문서를 읽어 들이는 시점에 Javascript engine이 실행
  
  ○ 특징
     - 개발자가 별도의 컴파일 작업이 없는 인터프리터 언어

● JavaScript 선언
  - <script> 태그를 사용
  - 속성
    - src : 속성은 외부의 JavaScript 파일을 HTML 문서에 포함할 때 사용
    - type : 미디어 타입을 지정할 때 사용. javascript는 text/javascript
  - <body> 안의 위치 시킬 것을 권장
    - <head> 안에 위치한 js는 브라우저의 각종 입/풀력 방생 이전에 초기화되므로 브라우저가 먼저 점검
    - <body> 안에 위치하면 브라우저가 HTML부터 해석하여 화면에 그리기 때문에 사용자가 빠르다고 느낌

● JavaScript 기본 문법
  ○ 변수
     - 변수 선언: 숫자 든 문자 든 var 사용
     - Js는 동적타입언어. 변수의 타입 지정없이 값이 할당되는 과정에서 자동으로 변수의 타입이 결정 >> 같은 변수에 여러 타입의 값을 할당 가능
 
  ○ 자료형
    - 프로그램은 정적인 데이터 값을 동적으로 변환해 가면서 원하는 정보를 얻음
    - 프로그램에서 다루는 데이터 값의 종류들을 자료 형이라 표현
    - Js에서는 자료 형을 원시 타입(primitive 타입)과 객체 타입(object type)으로 분류
    - 원시 타입(primitive 타입)
      1. 숫자(number) : 정수 또는 실수형
      2. 문자열(string) : 문자
      3. boolean(boolean) : 참 or 거짓
      4. null(Object) : 값이 존재하지 않을 경우
      5. undefined(undefined) : 변수가 선언 되었지만 초기화가 되지 않을 경우

    ○ 숫자(number) 타입
       - 모든 숫자를 8byte 실수 형태로 처리
       - js에는 언더/오버플로우, 0으로 나누는 연산 예외 X
       - 특별한 상수 존재
         - Infinity : 무한대를 나타내는 상수, 어떠한 수를 0으로 나누거나 Infinity를 어떠한 수로 사칙연산한 결과
         - NaN(Not a Number) : 계산식의 결과가 숫자가 아님을 나타내는 상수.
    
    ○ 문자열
      - 16비트의 Unicode
      - 백틱(`)을 이용한 문자열 표현 가능(ES6) ex. console.log(`hello ${name}`);

    ○ boolean
      - 비교 연산의 결과값으로 true or false
      - 비어있는 문자열, null, undefined, 숫자 0은 false로 간주 됨!!
      - null은 값이 없거나 비어 있음, undefined는 값이 초기화 되지 않았음(정의되지 않음)

  ● 변수 호이스팅
    - var 키워드를 사용한 변수는 중복해서 선언이 가능
    - 호이스팅이란, var 선언문이나 function 선언문 들 모든 선언문이 해당 Scope의 처음으로 옮겨진 것처럼 동작하는 특성
      즉, js는 모든 선언문이 선언되기 이전에 참조가 가능.(변수 및 함수 선언은 어디에 있던 참조 가능)
    - 변수의 생성
      - 선언 단계: 변수 객체에 변수를 등록
      - 초기화 단계: 변수 객체에 등록된 변수를 메모리에 할당. undefined로 초기화 됨. (두 단계는 한번에 이루어짐)
      - 할당 단계: undefined로 초기화된 변수에 실제 값을 할당

  ● 상수(constant)
    - ECMAScript6부터 const keyword(상수를 지원)와 let(변수)
    - 차이
      - var: 변수, 전역 스코프, 재선언 가능
      - let: 변수, 해당 스코프, 재선언 불가
      - const: 상수, 해당 스코프, 재선언 불가

  ● 객체(Object)
    - 이름과 값으로 구성된 프로퍼티의 집합(key, value)
    - 문자열,숫자,boolean,null,undefined(primitive type)을 제외한 모든 값은 객체
    - 전역 객체를 제외한 js 객체는 프로퍼티를 동적으로 추가허가나 삭제 가능
    - js의 함수는 일급 객체이므로 값으로 사용할 수 있다. 따라서 프로퍼티의 값으로 함수를 사용 가능
    - js 객체는 프로토타입이라는 특별한 프로퍼티를 포함

    ○ 객체 생성
      - 객체 리터럴
         - {} 를 사용하여 객체를 생성.
      - Object 생성자 함수
         - new 연산자와 Object 생성자 함수르르 호출하여 빈 객체를 생성
         - 빈 객체 생성 후 프로퍼티 또는 메소드를 추가하여 객체를 완선
      - 생성자 함수
        - 동일한 프로퍼티를 갖는 객체 생성 시 위 두 방법은 동일한 코드를 반복적으로 작성

    ○ 속성 값 조회
      - .(dot)이나 대괄호([])를 사용해 접근
        ex. member.age   or   member["age"]

  ● 함수(function)
    - js에서 함수는 일급(first-class) 객체이다.
    - 함수를 변수, 객체, 배열등에 저장할 수 있고 다른 함수에 전달하는 전달 인자(콜백함수) 또는 리턴 값으로 사용 가능
    - 함수는 프로그램 실행 중에 동적으로 생성 가능

    ○ 함수 호이스팅
      - 함수 선언문의 경우 함수 선언의 위치와 상관없이 코드 내 어느 곳에서든지 호출이 가능
      - js는 모든 선언(var, function)을 호이스팅(Hoisting)함.

    ○ 콜백 함수
      - 함수를 명시적으로 호출하는 방식이 아니라 특정 이벤트가 발생했을 때 시스템에 의해 호출되는 함수를 말함
      - 일반적으로 콜백 함수는 매개변수를 통해 전달되고 전달받은 함수의 내부에서 어느 특정시점에 실행됨
      - 콜백 함수는 주로 비동기식 처리 모델에서 사용됨 -> 처리가 종료되면 호출된 함수(콜백함수)를 미리 매개변수에 전달하고 처리가 종료되면 콜백함수를 호출


● DOM
  - HTML과 XML 문서의 구조를 정의하는 API를 제공
  - DOM은 문서 요소 집합을 트리 형태의 계층 구조로 HTML을 표현
  
  ○ 문서 객체 만들기
    - 문서 객체는 text node를 갖는 객체와 갖지 않는 객체로 나뉨
    
    - createElement(tagName): element node를 생성
    - createTextNode(text) : text node를 생성
    - appendChild(node): 객체에 node를 child로 추가.


  ○ 객체 속성 설정
    - setAttribute(name, value) : 객체의 속성을 지님
    - getAttribute(name): 객체의 속성값을 가져옴
    
    - innterHTML : 문자열을 HTML 태그로 삽입
    - innerText : 문자열을 text node로 삽입

  ○ 객체 가져오기 
    - getElementById(id): 태그의 id 속성이 id와 일치하는 element 객체 얻기
    - getElementsByClassName(classname): 태그의 class 속성이 classname과 일치하는 element 배열 얻기
    - getElementsByTagName(tagname): 태그 이름이 tagname과 일치하는 element 배열 얻기
    - getElementByName(name): 태그의 name 속성이 name과 일치하는 element 배열 얻기
    - querySelector(selector): selector에 일치하는 첫번째 element 객체 얻기
    - querySelectorAll(selector): selector에 일치하는 모든 element 배열 얻기

  ○ 객체 제거
    - remove(childnode): 객체의 자식 노드를 제거

● 이벤트(Event)
  - 웹 페이지에서 여러 종류의 상호작용이 있을 때 마다 이벤트가 발생
  - 이벤트는 일반적으로 함수와 연결이 되고, 이 함수는 이벤트가 발생되기 전에는 실행되지 않다가
    이벤트가 발생할 경우 실행 -> 이벤트 핸들라 또는 이벤트 리스너라 하며 이 함수에 이벤트 발생 시 실행해야 하는 코드 작성

  ○ 이벤트 종류
    1. 마우스 이벤트
    2. 키보드 이벤트
    3. Frame 이벤트
    4. 폼(form) 이벤트

  ● 이벤트 핸들러 등록
    1. 인라인 이벤트 핸들러
      - 이벤트를 감지하고 대응하는 작업을 등록하는 방법은 여러가지 제공
      - 어떤 이벤트를 처리할 작업을 등록하는 것을 '이벤트 핸들러(리스너)를 등록한다' 라고 표현
      - js 초기에는 HTML 요소의 내부에서 직접 이벤트 핸들러를 등록.
      - 최근 관심 받고 있는 CBD 방식의 라이브러리는 인라인 방식으로 이벤트를 처리
  
    2. 이벤트 핸들러 프로퍼티 방식
      - HTML에 직접 이벤트 핸들러를 등록하는 대신 JS에서 이벤트 핸들러를 등록하는 방법
      - HTML과 JS 코드를 분리
 
    3. addEventListener 메소드 방식
      - 전달 인자의 첫번째에는 이벤트 이름, 두번째에는 이벤트 핸들러, 세번째에는 갭처링 여부
      - addEventListener 메소드를 이용하여 대상 DOM 요소에 이벤트를 바인딩하고 해당 이벤트가 발생했을 때
        실행 될 콜백 함수(이벤트 핸들러)를 지정한다.

● Web Storage

  ○ LocalStorage
    - 데이터를 사용자 로컬에 보존하는 방식
    - 데이터를 저장, 덮어쓰기, 삭제 등 조작 가능
    - js 로만 조작
  
  - cookie와의 차이점
    - 유효 기간이 없고 영구적 이용 가능
    - 쿠키와는 다르게 네트워크 요청 시 서버로 전송되지 않음

  - LocalStorage, SessionStorage 기본 구성
    - 키와 값을 하나의 세트로 저장.
    - 도메인과 브라우저별로 저장
    - 값은 반드시 문자열로 저장됨
    
    - 공통 메소드와 프로퍼티
      - setItem(key, value) : key-value를 쌍으로 저장
      - getItem(key): key에 해당하는 값을 리턴
      - removeItem(key): key에 해당하는 값 삭제
      - clear() - 모든 값 삭제
      - key(index): index에 해당하는 key
      - length: 저장된 항목의 개수

  ○ sessionStorage
    - SessionStorage는 현재 떠 있는 탭에서만 유지(같은 페이지라도 탭이 다르면 다른 곳에 저장)

※ BABEL : 상위버전의 ES로 개발된 자바스크립트를 하위버전으로 변환해주는 툴
   TypeScript : 동적타이핑언어 + Type
   Node.js : chrome v8 자바스크립트 엔진을 기반으로 해서 자바스크립트의 독립적 실행을 지원하기위한 플랫폼(런타임)
              -> 활용분야 : 백엔드 컴포넌트 개발, 모바일 개발
