● Library
- 제공하는 목적에 맞게 구현된 구현체들의 묶음. 
필요에 따라 생성하거나 호출하여 사용(도구 같은 느낌,완제품)

● Framework
- 제공하는 목적에 맞게 설계한 기본 인프라(기반 시설), 틀, 뼈대(반제품)

● Spring Framework
- Enterprise Application 개발을 위한 Framework
- Web Application 개발 시 필수로 사용하는 표준같은 Framework
- light weight 솔루션
- WAS에 대한 의존도를 낮춰줌 --> Spring Framework의 구현체에서 필요한 부분들만 서비스하고자하는 서버에 두고 사용(WAS에 독립적)
- DI, AOP, SpringMVC, Spring ORM

● Spring Framework의 구조
- Spring의 핵심
  1. Pojo(plain old java object)
    - 특정 환경이나 기술에 종속적이지 않은 객체지향 원리에 충실한 자바객체
    - 테스트하기 용이하며, 객체지향 설계를 자유롭게 적용할 수 있다.
  2. PSA
    - 환경과 세부기술의 변경과 관계없이 일관된 방식으로 기술에 접근할 수 있게 해주는 설계 원칙
  3. IoC/DI
    - DI는 유연하게 확장 가능한 객체를 만들어 두고 객체 간의 의존관계를 외부에서 다이나믹하게 설정
  4. AOP
    - 관심사의 분리를 통해서 소프트웨어의 모듈성을 향상

● Spring Framework의 특징
  - 경량컨테이너
    - 스프링은 자바객체를 담고 있는 컨테이너이다.
    - 스프링 컨테이너는 이들 자바 객체의 생성과 소멸과 같은 라이프사이클을 관리
    - 언제든지 스프링 컨테이너로부터 필요한 객체를 가져와 사용할 수 있다.

  - DI 패턴 지원
    - 스프링은 설정 파일이나 어노테이션을 통해서 객체 간의 의존 관계를 설정할 수 있다.
    - 객체는 의존하고 있는 객체를 직접 생성하거나 검색할 필요가 없다.

  - AOP 지원
    - 문제를 바라보는 관점을 기준으로 프로그래밍하는 기법

  - IoC(제어의 반전)
    - 스프링에서 객체에 대한 생성과 생명주기를 관리할 수 있는 기능을 제공  

● Spring Framework 개발 설정
- xml 기반 설정
- annotation 기반 설정
- java source 기반 설정

==> 많은 설정으로 인한 부담 -> Spring Boot

● IoC(Inversion of Control, 제어의 역행)
  - 객체지향 언어에서 Object간의 연결 관계를 런타임에 결정
  - 객체 간의 관계가 느슨하게 연결됨
  - IoC의 구현 방법 중 하나가 DI(Dependency Injection)

  ○ DL(Dependency Lookup)
    - 컨테이너가 lookup context를 통해서 필요한 Resource나 Object를 얻는 방식
    - Lookup 한 Object 필요한 타입으로 Casting 해주어야함

  ○ DI(Dependency Injection)
    - Object에 lookup 코드를 사용하지 않고 컨테이너가 직접 의존 구조를 Object에 설정할 수 있도록 지정 해주는 방식

● Container
  - 객체의 생성, 사용, 소멸에 해당하는 라이프사이클을 담당
  - 라이프사이클을 기본으로 애플리케이션 사용에 필요한 주요 기능을 제공

 ○ Container 기능
    - 라이프 사이클 관리
    - Dependency 객체 제공

 ○ Container 필요성
    - 비즈니스 로직 외에 부가적인 기능들에 대해서는 독립적으로 관리되도록 하기 위ㅡ함
    - 서비스 객체를 사용하기 위해 각각 Factory 또는 Singleton 패턴을 직접 구현하지 않아도 됨

  ● Spring DI Container
    - Spring DI Container가 관리하는 객체를 빈(Bean)이라 하고, 이 빈들의 생명주기를 관리하는 의미로 빈팩토리라 한다
    - Bean Factory에 여러 가지 컨테이너 기능을 추가하여 ApplicationContext라 한다.

    ○ BeanFactory
      - Bean을 등록, 생성, 조회, 반환 관리
      - 일반적으로 BeanFactory보다는 이를 확장한 ApplicationContext를 사용
      - getBean() method가 정의되어 있음

    ○ ApplicationContext
      - Bean을 등록, 생성, 조회, 반환 관리
      - Spring의 각종 부가 서비스를 추가로 제공

● DI
  - 싱글톤 빈
    - 스프링 빈은 기본적으로 싱글톤으로 만들어짐
    - 컨테이너가 항상 새로운 인스턴스를 반환하게 만들고 싶을 경우 scopr를 prtotype으로 설정해야 함

  ○ 빈의 생성 범위
    1. singleton : 스프링 컨테이너 당 하나의 인스턴스 빈만 생성
    2. prototype : 컨테이너에 빈을 요청할 때마다 새로운 인스턴스 생성
    3. request : HTTP Request별로 새로운 인스턴스 생성
    4. session : HTTP Session별로 새로운 인스턴스 생성

  ○ 스프링 빈 설정
    1. XML
    2. Annotation
    3. Java Code

  - Dependency Injection
    - 객체 간의 의존관계를 자신이 아닌 외부의 조립기가 수행
    - 제어의 역행
    - DI를 통해 시스템에 있는 각 객체를 조정하는 외부 개체가 객체들에게 생성시에 의존관계를 주어짐
    - 느슨한 결합: 객체는  인터페이스에 의한 의존 관계만을 알고 있음

    1. XML 의존 관계 주입
      1. Constructor 이용
      2. Setter 이용