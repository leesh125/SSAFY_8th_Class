● MVC
  ○ Model1 구조
    - model은 view와 logic을 JSP 페이지 하나에서 처리하는 구조를 말함
    - client로부터 요청이 들어오게 되면 JSP 페이지는 java beans나 별도의 service class를 이용하여 작업을 처리, client에 출력

  ○Model1 구조의 장단점
     - 장점 : 구조가 단순하며 직관적, 개발 시간이 짧아 개발 비용 감소
     - 단점 : java 코드가 섞여 코드가 복잡해짐, 분업이 힘듦, 유지보수 어려움

  ○ Model2 구조
    - client 요청에 대한 처리는 servlet, logic처리는 java class, client에게 출력하는 response page를 JSP가 담당

    I. Model(Service, Dao or Java beans)
      - Logic을 처리하는 모든 것.
        controller로 부터 넘어온 data를 이용하여 이를 수행 후, 결과를 controller에 return

    II. View(JSP)
      - 모든 화면 처리를 담당. Client의 요청에 대한 결과 뿐 아니라, Controller에 요청을 보내는 화면단도 jsp에서 처리
         java code는 사라지고 결과 출력을 위한 tag 존재

    III. Controller(Servlet)
      - Client의 요청을 분석하여 logic 처리를 위한 Model단을 호출
        
  ○Model2 구조의 장단점
     - 장점 : 코드 분리로 인해 코드가 복잡하지 않음, 분업 용이, 유지보수 쉬어짐
     - 단점 : 구조가 복잡하여 초기 진입 어려움, 개발 시간 증가로 인한 개발 비용 증가

● EL(Expression Language)
  - EL은 표현을 위한 언어로 JSP 스크립트의 표현식을 대신하여 속성 값을 쉽게 출력하도록 고안된 language
  - 즉 표현식을 대체할 수 있다.
  - EL 표현식에서 도트 연산자 왼쪽은 반드시 java.util.Map 객체 또는 java bean 객체여야 함
  - EL 표현식에서 도트 연산자 오른쪽은 반드시 맵의 키이거나 Bean 프로퍼티여야 한다.

  ○ EL 에서 제공하는 기능
    - JSP의 네가지 기본 객체(pageContext, request, session, application)가 제공하는 영역의 속성 사용
    - 자바 클래스 메소드 호출 기능
    - 표현 언어만의 기본 객체 제공
    - 수치, 관계, 논리 연산 제공

● EL 문법: [] 연산자
  - Dot 표기법 외에 [] 연산자로 객체의 값에 접근 가능
  ex. ${userinfo["name"]} or ${userinfo.name}

● EL 내장객체
  - JSP : pageContext(Java Bean 타입) - 현재 페이지의 프로세싱과 상응하는 PageContext instance
  나머지는 Map 형식(k,v)

● JSTL (JSP Standard Tag Library)
  - 자바 서버 페이지 표준 태그 라이브러리