● AOP (Aspect Oriented Programming) - 관점지향 프로그래밍
  => 공통로직 분리 및 공통로직 사용(호출) 코드까지 공통로직의 연장선으로 본다.

  - Core Concern: 핵심 로직
  - Cross Cutting Concertn: 횡단 관심사, 공통 로직

  ○ weaving : 핵심로직, 공통로직을 엮어주는 작업(핵심로직에 공통로직 사용 코드 삽입)  
    1. Compile Time Weaving : class 파일 조작
    2. Runtime Weaving : 메모리에 로드된 클래스의 바이트 코드 조작
    3. Runtime Proxy Weaving : 타겟객체(핵심로직을 갖고 있는 객체)를 감싸는 Proxy 객체 동적 생성

  ○ JoinPoint: 핵심 로직의 어느 부분에 공통로직을 사용 적용할지 그 위치(ex. 메소드 수행 전, 후, 예외 던질 때)

  ○ Advice: 공통 로직
  ○ Target: 핵심 로직
  ○ Pointcut : Target과 Target에 적용할 핵심 메소드(실제 적용 대상을 선별하기 위한 표현식)

● Spring AOP 사용
  - 공통 로직 작성 방법
    - Spring API 제공 상위 Type 확장. 메소드 재정의
    - POJO(Plain Old Java Object) 지원 + 설정(XML, annotation)
