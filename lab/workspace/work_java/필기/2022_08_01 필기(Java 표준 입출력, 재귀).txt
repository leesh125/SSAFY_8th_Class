● 표준 입출력
 - System.in
 - System.out
 - System.err (오류 출력 용)

● 표준 입출력의 대상 변경(다른 스트림으로)
 - System.setOut()
 - System.setErr()
 - System.setIn()

● java.util.Scanner
  - 파일, 입력 스트림등에서 데이터를 읽어 구분자로 토큰화하고 다양한 타입으로 형변환하여 리턴해주는 클래스
  - 입력 스트림을 다루는 방법을 몰라도 손쉽게 입력처리 가능
  - 데이터 형변환으로 인한 편리함
  - 대량의 데이터 처리 시 수행시간이 비효율적임

  ○ 주요 메소드
    - nextInt() : int 타입 반환, 유효 문자열 후 White space 문자를 만나면 처리 (유효 데이터까지 읽음, 다음 구분자 안 읽음)
    - nextDouble() : double 타입 반환, 유효 문자열 후 White space 문자를 만나면 처리
    - next() : 문자열 반환, 유효 문자열 후 White space 문자를 만나면 처리
    - nextLine() : 문자열 반환, 개행(enter) 문자를 만나면 처리, next()와 달리 문자열 안에 띄어쓰기 할 수 있음

● java.io.BufferedReader
  - 필터 스트림 유형
  - 줄(line)단위로 문자열 처리 기능 제공 -> readLine()
  - 대량의 데이터 처리 시 수행시간이 효율적임

● java.lang.StringBuilder
  - 문자열의 조작을 지원하는 클래스
  - 자바에서 상수로 취급되는 문자열을 조작 시마다 새로운 문자열이 생성되는 것을 방지
  - append()
  - toString()

● 빅-오(O) 표기법
  - 시간 복잡도 함수 중에서 가장 큰 영향력을 주는 n에 대한 항만을 표시

● 재귀 함수
1. 함수에 대한 정의를 명확히 해라!(what)
2. "Flat": 평평한 로직을 바라보기 -> 자신을 통해 자신을 정의한다.
3. 각 재귀의 실행을 결정하는 결정요인(값)은 매개변수로 선언

  - 함수 내부에서 직접 혹은 간접적으로 자기 자신을 호출하는 함수
  - 일반적으로 재귀적 정의를 이용해서 재귀 함수를 구현한다.
  - 따라서, 기본 부분과 유도 부분으로 구성된다
  - 재귀적 프로그램을 작성하는 것은 반복 구조에 비해 간결하고 이해하기 쉽다.
    - 그러나, 재귀에 대해 익숙하지 않은 개발자들은 재귀적 프로그램이 어렵다고 느낀다.
  - 함수 호출은 프로그램 메모리 구조에서 스택을 사용한다.
  - 따라서 재귀 호출은 반복적인 스택의 사용을 의미하며, 메모리 및 속도에서 성능저하가 발생한다.