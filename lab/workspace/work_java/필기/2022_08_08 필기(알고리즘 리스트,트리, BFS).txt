● 리스트 (순서가 있는 데이터의 목록)
  - 순서를 가진 데이터의 집합을 가리키는 추상자료형
  - 동일한 데이터를 가지고 있어도 상관없다.
  - 구현 방법에 따라 두 가지로 나뉨
    1. 순차 리스트: 배열을 기반으로 구현된 리스트
    2. 연결 리스트: 메모리의 동적할당을 기반으로 구현된 리스트

● 연결리스트
  - 자료의 논리적인 순서와 메모리 상의 물리적인 순서가 일치하지 않고, 개별적으로 위치하고 있는 각 원소를 연결하여 
    하나의 전체적인 자료구조를 이룬다.
  - 링크를 통해 원소에 접근하므로, 순차 리스트에서처럼 물리적인 순서를 맞추기 위한 작업이 필요하지 않다.
  - 자료구조의 크기를 동적으로 조정할 수 있어, 메모리의 효율적인 사용이 가능하다.

  ○ 연결 리스트의 기본 구조
    ○ 노드: 연결 리슽에서 하나의 원소를 표현하는 building block
      - 구성요소
        1. 데이터 필드
          - 원소의 값을 저장
          - 저장할 원소의 종류나 크기에 따라 구조를 정의하여 사용함
        2. 링크 필드
          - 다음 노드의 참조값을 저장
    ○ 헤드: 연결 리스트의 첫 노드에 대한 참조값을 갖고 있음
    
  ○ 연결 리스트의 종류
    - 단순 연결 리스트 : 링크 하나로
    - 이중 연결 리스트 : 링크 두개로
    - 원형 연결 리스트
      - 단순 원형 연결 리스트 
      - 이중 원형 연결 리스트 

● 트리
  - 비선형 구조
  - 원소들 간에 1:n 관계를 가지는 자료구조
  - 원소들 간에 계층관계를 가지는 계층형 자료구조
  - 상위 원소에서 하위 원소로 내려가면서 확장되는 트리(나무) 모양의 구조

  ○ 트리 구성요소
    - 노드 : 트리의 원소
    - 한 개 이상의 노드로 이루어진 유한 집합이며 다음 조건을 만족
      - 루트(root): 노드 중 최상위 노드
      - 나머지 노드들은 n(>=0)개의 분리 집합(T1,T2..TN) 으로 분리
    - 이들 T1,T2...TN은 각각 하나의 트리가 되며(재귀적 정의) 루트의 부 트리(subtree)라 한다.
    - 형제 노드(sibling node) : 같은 부모 노드의 자식 노드들
    - 조상 노드 : 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들
    - 서브 트리 : 부모 노드와 연결된 간선을 끊었을 때 생성되는 트리
    - 자손 노드 : 서브 트리에 있는 하위 레벨의 노드들

    - 차수
      - 노드의 차수 : 노드에 연결된 자식 노드의 수(= 자식 노드로의 간선의 수)
      - 트리의 차수 : 트리에 있는 노드의 차수 중에서 가장 큰값
      - 단말 노드(리프 노드) : 차수가 0인 노드 즉, 자식 노드가 없는 노드
    - 높이
      - 노드의 높이 : 루트에서 노드에 이르는 간선의 수. 노드의 레벨
      - 트리의 높이 : 트리에 있는 노드의 높이 중에서 가장 큰 값

● 이진 트리 : 차수가 2인 트리
  - 각 노드가 자식 노드를 최대한 2개 까지만 가질 수 있는 트리
    - 왼쪽, 오른쪽 자식 노드
  - 모든 노드들이 최대 2개의 서브트리를 갖는 특별한 형태의 트리

● 이진 트리 종류
  ○ 포화 이진 트리(Perfect Binary Tree)
    - 모든 레벨에 노드가 포화 상태로 차 있는 이진 트리
    - 높이가 h일 때, 최대의 노드 개수인(2^h+1 - 1)의 노드를 가진 이진 트리

  ○ 완전 이진 트리
    - 높이가 h이고 노드 수가 n개 일 때, 포화 이진 트리의 노드 번호 1~n번 까지 빈자리가 없는 이진 트리

● BFS(Breadth First Search): 넓이 우선 탐색
  - 