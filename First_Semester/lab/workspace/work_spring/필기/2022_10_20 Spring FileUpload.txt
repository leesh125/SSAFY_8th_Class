● Spring Project 동작 순서
1. server.xml 을 읽음
  1-1. Context(내 project)를 메모리에 올림

2. 내 프로젝트 src > main > webapp > META-INF > context.xml 읽음(resource들을 쓸거라고 알려주는거)

3. WEB-ING/web.xml을 읽음(META-INF가 없으면 2번 과정 생략하고 바로 3번)

4. listener로 프로젝트 실행 시점 시에
  4-1 web.xml에서 web의 정보가 아닌 것들을 먼저 읽음(ex. root-context.xml > Service, Dao, DTO, AOP ...)

5. 호출할 때 마다 servlet 안에 해당되는 것들을 읽어들임

※ Filter는 클라이언트와 Dispatcher Servlet 사이
   AoP는 컨트롤러 안에서(req, res 조작 못함)
   Interceptor는 Dispatcher Servlet과 컨트롤러(핸들러) 사이


● File Upload
1. input 타입 file로(다중 파일은 multiple 설정으로)<input type="file" class="form-control border" name="upfile" multiple="multiple">

2. 반드시 POST로만 넘겨준다.

3. enctype="multipart/form-data" 로 해야 문자가 아닌 바이트 파일로 넘어간다.

4. name에 맞는 requestparameter를 받아 MultipartFile 배열로 받는다 @RequestParam("upfile") MultipartFile[] files

● Interceptor
- HandlerInterceptor를 통한 요청 가로채기
  - Controller가 요청을 처리하기 전/후 처리
  - 로깅, 모니터링 정보 수지브 접근 제어 처리 등의 실제 Bussiness logic과는 분리되어 처리해야 하는 기능들을 넣고 싶을 때 유용
  - interceptor를 여러 개 설정 할 수 있음

※ 순서
request(client) -> doFilter(Filter) -> preHandle(Interceptor) -> AOP -> postHandle(Interceptor) -> doFilter(Filter)

○ Filter와 Interceptor 차이
  - Filter는 서버 안에서 작업 처리, Interceptor는 Spring Container 안에서 작업 처리

●Interceptor 호출 순서
1. preHandle() -> Controller 로직 -> postHandle() -> afterCompletion()

● Mybatis : JDBC를 대신하는 프레임워크