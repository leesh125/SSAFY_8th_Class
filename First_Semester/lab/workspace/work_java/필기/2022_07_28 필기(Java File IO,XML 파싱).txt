● I/O와 Stream
  ○ IO : 데이터의 입력(input)과 출력(output)
  
  - 데이터는 한쪽에서 주고 한쪽에서 받는 구조
    - 이때 입력과 출력의 끝단 : 노드(node)
    - 두 노드를 연결하고 데이터를 전송할 수 있는 개념 : 스트림(Stream)
       - 물의 흐름, 전기의 흐름과 같은 개념
    - 스트림은 단방향으로만 통신이 가능, 하나의 스트림으로 입력과 출력을 같이 처리할 수 없음

  ○ Node stream : node에 연결되는 스트림
    - 데이터 타입에 따라 다름(byte : xxxStream, char : xxx..er)
  
● InputStream의 주요 메서드
   ○ read()
     - public abstarct int read() throws IOException
       - byte하나를 읽어서 int로 반환한다. 더 이상 읽을 값이 없으면 -1을 리턴
     - public int read(byte b[]) throws IOException
       - 데이터를 읽어서 b를 채우고 읽은 바이트의 개수를 리턴한다. 0이 리턴되면 더 이상 읽을 값이 없는 상황
     - public int read(byte b[], int offset, int len) throws IOException
       - 최대 len 만큼 데이터를 읽어서 b의 offset부터 b에 저장하고 읽은 바이트 개수 리턴. 따라서 len + offset은 b의 크기 이하여야 한다.

   ○ close()
     - public void clost() throws IOException
       - 스트림을 종료해서 자원을 반납한다.


● OutputStream의 주요 메서드
   ○ write()
     - public abstarct void write(int b) throws IOException
       - b의 내용을 byte로 출력한다.
     - public void write(byte b[]) throws IOException
       - b를 문자열로 변환해서 출력
     - public void write(byte b[], int offset, int len) throws IOException
       - b의 off 부터 off+len-1 만큼을 문자열로 변환해서 출력

   ○ close()
     - public void close() throws IOException
       - 스트림을 종료해서 자원을 반납한다. close()는 내부적으로 flush()를 호출

   ○ flush()
     - 버퍼가 있는 스트림에서 버퍼의 내용을 출력하고 버퍼를 비운다.

● 보조 스트림 : Filter Stream, Processing Stream
  - 다른 스트림에 부가적인 기능을 제공하는 스트림 (문자 set 변경, Buffering, 기본 데이터 형의 전송, 객체 입출력)

  ○ 스트림 체이닝(Stream Chaining)
    - 필요에 따라 여러 보조 스트림을 연결해서 사용 가능

  ○ 생성 - 이전 스트림을 생성자의 파라미터에 연결
    - ex. new BufferdInputStream(System.in);

  ○ 사용할 스트림의 결정 과정
   - 노드가 무엇인가 -> 타입은 문자열인가, 바이트인가? -> 방향이 무엇인가? -> 추가 기능이 필요한가?
      ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ      ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
                                         노트 스트림 구성 			       보조 스트림 구성

● InputStreamReader & OutputStreamWriter
  - byte 기반 스트림을 char 기반으로 변경해주는 스트림
    - 문자열을 관리하기 위해서는 byte 단위보다 char 단위가 유리
    - 키보드에서 입력(byte stream) 받은 데이터를 처리할 경우 등

● 객체 직렬화
  - 객체를 파일등에 저장하거나 네트워크로 전송하기 위해 연속적인 데이터로 변환하는 것
  - 반대의 경우는 역 직렬화

  ○ 직렬화 되기 위한 조건
    - Serializable 인터페이스를 구현할 것
    - 클래스의 모든 멤버가 Serializable 인터페이스를 구현해야 함
    - 직렬화에서 제외하려는 멤버는 transient 선언

  ○ serialVersionUID
    - 클래스의 변경 여부를 파악하기 위한 유일 키
    - 직렬화 할 때의 UID와 역 직렬화 할 때의 UID가 다를 경우 예외 발생
    - 직렬화되는 객체에 uid가 설정되지 않았을 경우 컴파일러가 자동 생성
      - 멤버 변경으로 인한 컴파일 시마다 변경 -> InvalidClassException 초래
    - 직렬화되는 객체에 대해서 serialVersionUID 설정 권장

● XML(Extensible Markup Language)
  - Markup Language: 태그등을 이용하여 문서나 데이터의 구조를 명기하는 언어

  ○ 파싱
    - 문서에서 필요한 정보를 얻기 위해 태그를 구별하고 내용을 추출하는 과정

● JSON (Javascript Object Notation)(자바스크립트에서의 객체 표현법)
  - 간결한 문법, 단순한 텍스트, 적은 용량으로 대부분의 언어, 대부분의 플랫폼에서 사용
    - 이 기종 간의 데이터 교환에 광범위하게 사용됨
  - 객체를 key-value의 쌍으로 관리

● Swing
  - Java Application 에서 사용되는 GUI를 제공하는 추상적으로 정의된 도구(컴포넌트) 모음
  
  ○ Container
    - 다른 컴포넌트들을 배치하기 위한 컴포넌트
    - Container는 다른 Container를 포함할 수 있고 나중에 복합적인 Layout을 구성할 수 있게 한다.
    - JFrame : 독립적으로 사용될 수 있으며 타이틀과 사이즈를 조절할 수 있는 버튼을 가짐
    - JPanel: 반드시 다른 Container에 포함되어야 하며 복합적인 레이아웃 구성에 사용

● Stream API
  - Java 8 지원
  - 자료구조 추상화
  - 배열, 컬렉션 -> 조회, 정렬, 수정, 집계 ...
  - 자료구조(소스, Source) ---> 스트림 생성(데이터 흐름, 운반 역할)

  ○ Stream
    1. Data를 갖고 있지 않음
    2. 스트림 생성 -> 중간 연산 -> 최종 연산
      - 중간 연산(filter, map) -> 반환형이 Stream
      - 최종 연산(collect, count, reduce, foreach) -> 반환형이 Stream X
    3. 병렬스트림 지원
    4. 지연된 연산(lazy): 최종연산 수행할 때 중간연산 처리
    5. 내부반복