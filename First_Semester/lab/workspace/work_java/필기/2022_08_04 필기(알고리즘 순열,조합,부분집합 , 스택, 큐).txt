● 순열(Permutation)
  - 서로 다른 것들 중 몇 개를 뽑아서 한 줄로 나열하는 것
  - nPr : 서로 다른 n개 중 r개를 택하는 순열은 다음과 같이 표현
  - nPr = n * (n-1) * (n-2) ... * (n-r+1)
  - nPn = n! (Factorial) , n! = n * (n-1) * (n-2) * ... * 2 * 1

  ○ 순열, 조합 차이
    - 순서가 의미있는 것 : 순열
    - 순서가 의미없는 것 : 조합

​[순열 만드는 방법] 
1. 기존 수와 중복되지 않게 숫자를 한 개씩 뽑는 일을 가능한 모든 수에 대해 반복해서 시도 
2. 목표하는 횟수만큼 "1"을 반복. 
* 뽑는 횟수가 고정되어 있다면 목표하는 횟수까지 돌아가는 반복문으로 해결할 수 있지만, 
  정해지지 않았다면 뽑는 횟수만큼 재귀적으로 호출하는 구조를 이용하는 것이 적합할 수 있다. 

​[재귀로 순열을 구성하는 방법]
1. 기존 수와 중복되지 않게 숫자를 한 개씩 뽑는 일을 가능한 모든 수에 대해 반복해서 시도
2. 현재까지 뽑은 순열 수(다음 수가 들어갈 index)를 넘겨주며 재귀 호출
3. 중복 검사 조건을 적절하게 초기화

[중복 여부를 판단하는 방법] 
1. 인덱스에 해당하는 숫자가 사용중인지 저장하는 boolean 배열을 생성
2. 해당 인덱스 값을 참조했을 때 true면 이미 사용 중이므로 다음 인덱스로 넘어가서 진행

● 조합
  - 서호 다른 n개의 원소 중 r개를 순서 없이 골라낸 것을 조합(Combination)이라고 부른다

● 부분 집합
  - 집합에 포함된 원소들을 선택하는 것
  - 다수의 중요 알고리즘들이 원소들의 그룹에서 최적의 부분집합을 찾는 것이다. (ex. 배낭 짐싸기, knapsack)
  - 부분집합의 수
    - 집합의 원소가 n개일 때, 공집합을 포함한 부분집합의 수는 2^n개 이다.
    - 이는 각 원소를 부분집합에 포함시키거나 포함시키지 않는 2가지 경우를 모든 원소에 적용한 경우의 수와 같다

● 스택
  - 물건을 쌓아 올리듯 자료를 쌓아 올린 형태의 자료구조
  - 스택에 저장된 자료는 선형 구조를 갖는다.
    - 선형구조 : 자료 간의 관계가 1대1의 관계를 갖는다.
    - 비선형구조 : 자료 간의 관계가 1대N의 관계를 갖는다(ex. 트리)
  - 스택에 자룔르 삽입하거나 스택에서 자료를 꺼낼 수 있다.
  - 후입선출구조(LIFO, Last-In-First-Out)
    - 마지막에 삽입한 자료를 가장 먼저 꺼낸다

  ○ 스택 응용
    I. 괄호
    II. Function call
      - 프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리
    III. 계산기
      - 문자열 수식 계산의 일반적 방법
        1. 중위 표기법의수식을 후위표기법으로 변경(스택 이용)
        2. 후위 표기법의 수식을 스택을 이용하여 계산한다.

  ○ 계산기
  I. 중위 표기법의수식을 후위표기법으로 변경(스택 이용)
    1. 수식의 각 연산자에 대해서 우선순위에 따라 괄호를 사용하여 다시 표현한다. 
    2. 각 연산자를 그에 대응하는 오른쪽 괄호의 뒤로 이동시킨다.
    3. 괄호를 제거한다.

  II. 후위 표기법의 수식을 스택을 이용하여 계산한다.
    1. 피연산자를 만나면 스택에 push
    2. 연산자를 만나면 필요한 만큼의 피연산자를 스택에서 pop하여 연산하고, 연산결과를 다시 스택에 push
    3. 수식이 끝나면, 마지막으로 스택을 pop하여 결과물 출력

● 큐
 - 스택과 마친가지로 삽입과 삭제의 위치가 제한적인 자료구조(선형자료구조)
    - 큐의 뒤에서는 삽입만 하고, 큐의 앞에서는 삭제만 이루어지는 구조

- 선입선출구조(FIFO, First In First Out)
  - 큐에 삽입한 순서대로 원소가 저장되어, 가장 먼저 삽입된 원소가 가장 먼저 삭제

  ○ 큐의 기본 연산
    - 삽입: enQueue
    - 삭제: deQueue