● 힙
 - 완전 이진 트리에 있는 노드 중에서 키 값이 가장 큰 노드나 키 값이 가장 작은 노드를 찾기 위해서 만든 자료구조

  ○ 최대 힙(max heap)
    - 키 값이 가장 큰 노드를 찾기 위한 완전 이진 트리
    - 부모 노드의 키 값 > 자식 노드의 키 값
    - 루트 노드: 키 값이 가장 큰 노드
 
  ○ 최소 힙(min heap)
    - 키 값이 가장 작은 노드를 찾기 위한 완전 이진 트리
    - 부모 노드의 키 값 < 자식 노드의 키 값
    - 루트 노드: 키 값이 가장 작은 노드

  ● 힙 연산 - 삭제
    - 힙에서는 루트 노드의 원소만을 삭제할 수 있다.
    - 루트 노드의 원소를 삭제하여 반환한다.
    - 힙의 종류에 따라 최대값 또는 최소값을 구할 수 있다.

  ● 힙의 활용 - 우선순위 큐(Priority Queue)
    ○ 우선순위 큐의 특성
      - 우선순위를 가진 항목들을 저장하는 큐
      - FIFO 순서가 아니라 우선순위가 높은 순서대로 먼저 나가게 된다.
 
    ○ java.util.PriorityQueue
      - Heap 자료구조
      - 최대 Heap
        - 가장 큰 값을 기준으로 먼저 나옴
      - 최소 Heap
        - 가장 작은 값을 기준으로 먼저 나옴

  ● 힙의 활용2
    - 힙 정렬은 힙 자료구조를 이용해서 이진 트리와 유사한 방법으로 수행된다.
    - 정렬을 위한 2단계
      1. 하나의 값을 힙에 삽입한다.(반복
      2. 힙에서 순차적(오름차순)으로 값을 하나씩 제거한다.
    - 힙 정렬의 시간 복잡도
      - N개의 노드 삽입 연산 + N개의 노드 삭제 연산
      - 노드 하나의 삽입과 삭제 연산은 각각 O(logN) 이다.
      - 따라서, 전체 정렬은 O(NlogN) 이다.

● 완전 검색 : 생각할 수 있는 모든 경우의 수를 나열해보고 확인하는 기법
  - Brute-force 혹은 generate-and-test 기법
  - 모든 경우의 수를 테스트한 후, 최종 해법을 도출
  - 상대적으로 빠른 시간에 문제 해결(알고리즘 설계)을 할 수 있다.
  
● 순열(Permutation)
  - 서로 다른 것들 중 몇 개를 뽑아서 한 줄로 나열하는 것(nPr) n!

