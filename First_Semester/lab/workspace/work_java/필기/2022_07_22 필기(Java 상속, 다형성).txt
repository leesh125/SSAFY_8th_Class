● 상속
  - 클래스 상속(단일 상속; extends)
    : 구현 상속 
        - Concrete 클래스 상속 : 모든 내용 구현된 클래스 상속 -> 선택적 재정의
                                      
        - Abstract 클래스 상속 : 미완성 클래스 상속 -> 재정의 필수
  
  - 인터페이스 상속(what) : 껍데기, spec 상속 -> 재정의 필수(how)

  ○ 상속 이점
     - 코드의 재사용성
     - 개발시간 단축
     - 개발비용 절감
     - 유지보수 용이

● 다형성(Polymorphism)
  - 상속이 전제조건 -> 클래스 계층구조 -> 크고, 작은 Type 판단 가능

  - 좌변 = 우변
        <----
    big >= small(up casting)

  ○ 다형성 활용체
    1. Dynamic Binding(반대개념: Static Binding = Compile Binding)
      - Runtime Binding
         -> compile time : 코드(문맥)에 맞게
             runtime time : 실제 객체를 체크하여 Binding
    2. 배열의 이형집합
      - 데이터타입[] arr = new 데이터타입[3];
        arr[0] = new Engineer();
        arr[1] = new Manager();
    3. 매개변수의 다형성
    4. 리턴타입의 다형성

// 반복문, 조건문, 배열, 알고리즘(라방 확인 배열)

System.setIn(new FileInputStream("./input1.txt"));
// InputStreamReader : 바이트 단위의 데이터를 char형으로 변환해줌
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));